//! A library to work with the PointCloud2 message type from ROS.
//!
//! ros_pointcloud2 mainly provides a [`ros_pointcloud2::PointCloud2Msg`] type that implements
//! functions for conversion to and from iterators.
//!
//! - [`ros_pointcloud2::PointCloud2Msg::try_from_iterable`]
//! - [`ros_pointcloud2::PointCloud2Msg::try_into_iter`]
//!
//! For ROS interoperability, the message type generated by the respective crate must be converted to
//! the [`ros_pointcloud2::PointCloud2Msg`] using the `From` trait,
//! which mostly does ownership transfers without copying the point data.
//!
//! There are implementations for the `r2r`, `rclrs` (ros2_rust) and `rosrust_msg` message types
//! available in the feature flags. If you miss a message type, please open an issue or a PR.
//! See the [`ros_pointcloud2::ros_types`] module for more information.
//!
//! Common point types like [`ros_pointcloud2::pcl_utils::PointXYZ`] or
//! [`ros_pointcloud2::pcl_utils::PointXYZI`] are provided in the
//! [`ros_pointcloud2::pcl_utils`] module. You can implement any custom point type
//! that can be described by the specification.
//!
//! # Example PointXYZ
//! ```
//! use ros_pointcloud2::{PointCloud2Msg, pcl_utils::PointXYZ};
//!
//! // PointXYZ is predefined
//! let cloud_points = vec![
//!   PointXYZ {x: 9.0006, y: 42.0, z: -6.2,},
//!   PointXYZ {x: f32::MAX, y: f32::MIN,z: f32::MAX,},
//! ];
//!
//! // For equality test later
//! let cloud_copy = cloud_points.clone();
//!
//! // Give the Vec or anything that implements `IntoIterator`.
//! let in_msg = PointCloud2Msg::try_from_iterable(cloud_points).unwrap();
//!
//! // Convert to your ROS crate message type, we will use r2r here.
//! // let msg: r2r::sensor_msgs::msg::PointCloud2 = in_msg.into();
//! // Publish ...
//! // ... now incoming from a topic.
//! // let in_msg: PointCloud2Msg = msg.into();
//!
//! let new_pcl = in_msg.try_into_iter().unwrap()
//!     .map(|point: PointXYZ| { // Define the data you want from the point
//!         // Some logic here
//!
//!         point
//!     })
//!     .collect::<Vec<_>>(); // iterating points here O(n)
//!
//! assert_eq!(new_pcl, cloud_copy);
//! ```

pub mod convert;
pub mod pcl_utils;
pub mod ros_types;

pub mod iterator;

use crate::convert::{FieldDatatype, FromBytes};
use crate::ros_types::{HeaderMsg, PointFieldMsg};
use convert::Endianness;
pub use convert::Fields;

use type_layout::TypeLayout;

#[cfg(feature = "derive")]
pub use rpcl2_derive::*;

/// All errors that can occur while converting to or from the PointCloud2 message.
#[derive(Debug)]
pub enum ConversionError {
    /// The coordinate field does not match the expected datatype.
    InvalidFieldFormat,

    /// Not enough meta or dimensional fields in the PointCloud2 message.
    NotEnoughFields,

    /// The dimensionality of the point inside the message is too high.
    TooManyDimensions,

    /// The field type is not supported by the ROS message description.
    UnsupportedFieldType,

    /// There are no points in the point cloud.
    NoPoints,

    /// The length of the byte buffer in the message does not match the expected length computed from the fields.
    DataLengthMismatch,

    /// There are fields missing in the message.
    FieldNotFound(Vec<String>),
}

#[derive(Clone, Debug)]
pub struct PointCloud2Msg {
    pub header: HeaderMsg,
    pub height: u32,
    pub width: u32,
    pub fields: Vec<PointFieldMsg>,
    pub is_bigendian: bool,
    pub point_step: u32,
    pub row_step: u32,
    pub data: Vec<u8>,
    pub is_dense: bool,
}

impl Default for PointCloud2Msg {
    fn default() -> Self {
        Self {
            header: HeaderMsg::default(),
            height: 1, // everything is in one row (unstructured)
            width: 0,
            fields: Vec::new(),
            is_bigendian: false, // ROS default
            point_step: 0,
            row_step: 0,
            data: Vec::new(),
            is_dense: false, // ROS default
        }
    }
}

impl PointCloud2Msg {
    fn prepare_direct_copy<const N: usize, C>() -> Result<Self, ConversionError>
    where
        C: PointConvertible<N>,
    {
        let point: Point<N> = C::default().into();
        debug_assert!(point.fields.len() == N);

        let meta_names = C::field_names_ordered();
        debug_assert!(meta_names.len() == N);

        let mut offset: u32 = 0;
        let layout = C::layout();
        let mut fields: Vec<PointFieldMsg> = Vec::with_capacity(layout.fields.len());
        for f in layout.fields.into_iter() {
            match f {
                PointField::Field {
                    name,
                    datatype,
                    size,
                } => {
                    fields.push(PointFieldMsg {
                        name,
                        offset,
                        datatype,
                        ..Default::default()
                    });
                    offset += size; // assume field_count 1
                }
                PointField::Padding(size) => {
                    offset += size; // assume field_count 1
                }
            }
        }

        Ok(PointCloud2Msg {
            point_step: offset,
            fields,
            ..Default::default()
        })
    }

    #[inline(always)]
    fn prepare<const N: usize, C>() -> Result<Self, ConversionError>
    where
        C: PointConvertible<N>,
    {
        let point: Point<N> = C::default().into();
        debug_assert!(point.fields.len() == N);

        let meta_names = C::field_names_ordered();
        debug_assert!(meta_names.len() == N);

        let mut meta_offsets_acc = 0;
        let mut fields = vec![PointFieldMsg::default(); N];
        for ((meta_value, meta_name), field_val) in point
            .fields
            .into_iter()
            .zip(meta_names.into_iter())
            .zip(fields.iter_mut())
        {
            let datatype_code = meta_value.datatype.into();
            if FieldDatatype::try_from(datatype_code).is_err() {
                return Err(ConversionError::UnsupportedFieldType);
            }

            let field_count = 1;

            *field_val = PointFieldMsg {
                name: meta_name.into(),
                offset: meta_offsets_acc,
                datatype: datatype_code,
                count: 1,
            };

            meta_offsets_acc += field_count * meta_value.datatype.size() as u32
        }

        Ok(PointCloud2Msg {
            point_step: meta_offsets_acc,
            fields,
            ..Default::default()
        })
    }

    /// Create a PointCloud2Msg from any iterable type.
    ///
    /// The operation is O(n) in time complexity where n is the number of points in the point cloud.
    ///
    /// # Example
    /// ```
    /// use ros_pointcloud2::{
    ///     pcl_utils::PointXYZ, PointCloud2Msg,
    /// };
    ///
    /// let cloud_points: Vec<PointXYZ> = vec![
    ///     PointXYZ { x: 1.0, y: 2.0, z: 3.0 },
    ///     PointXYZ { x: 4.0, y: 5.0, z: 6.0 },
    /// ];
    ///
    // let msg_out = PointCloud2Msg::try_from_iterable(cloud_points).unwrap();
    /// ```
    pub fn try_from_iter<const N: usize, C>(
        iterable: impl Iterator<Item = C>,
    ) -> Result<Self, ConversionError>
    where
        C: PointConvertible<N>,
    {
        let mut cloud = Self::prepare::<N, C>()?;

        iterable.into_iter().for_each(|coords| {
            let point: Point<N> = coords.into();

            point.fields.iter().for_each(|meta| {
                let truncated_bytes = unsafe {
                    std::slice::from_raw_parts(meta.bytes.as_ptr(), meta.datatype.size())
                };
                cloud.data.extend_from_slice(truncated_bytes);
            });

            cloud.width += 1;
        });

        cloud.row_step = cloud.width * cloud.point_step;

        Ok(cloud)
    }

    pub fn try_from_vec<const N: usize, C>(vec: Vec<C>) -> Result<Self, ConversionError>
    where
        C: PointConvertible<N>,
    {
        let mut cloud = Self::prepare_direct_copy::<N, C>()?;

        let bytes_total = vec.len() * cloud.point_step as usize;
        cloud.data.resize(bytes_total, u8::default());
        let raw_data: *mut C = cloud.data.as_ptr() as *mut C;
        unsafe {
            std::ptr::copy_nonoverlapping(
                vec.as_ptr() as *const u8,
                raw_data as *mut u8,
                bytes_total,
            );
        }

        cloud.width = vec.len() as u32;
        cloud.row_step = cloud.width * cloud.point_step;

        Ok(cloud)
    }

    pub fn try_into_iter<const N: usize, C>(
        self,
    ) -> Result<impl Iterator<Item = C>, ConversionError>
    where
        C: PointConvertible<N>,
    {
        iterator::PointCloudIterator::try_from(self)
    }

    #[cfg(feature = "rayon")]
    pub fn try_into_par_iter<T, const SIZE: usize, const DIM: usize, const METADIM: usize, C>(
        self,
    ) -> Result<impl rayon::iter::ParallelIterator<Item = C>, ConversionError>
    where
        C: PointConvertible<T, SIZE, DIM, METADIM> + Send + Sync,
        T: FromBytes + Send + Sync,
    {
        iterator::PointCloudIterator::try_from(self)
    }
}

/// Internal point representation. It is used to store the coordinates and meta data of a point.
/// In each iteration, an internal point representation is converted to the desired point type.
/// Implement the `From` traits for your point type to use the conversion.
///
/// See the [`ros_pointcloud2::PointConvertible`] trait for more information.
pub struct Point<const N: usize> {
    pub fields: [PointMeta; N],
}

/// Trait to enable point conversions on the fly while iterating.
///
/// Implement this trait for your custom point you want to read or write in the message.
///
/// # Example
/// ```
/// use ros_pointcloud2::{Point, PointConvertible, MetaNames, size_of};
///
/// #[derive(Clone, Debug, PartialEq, Copy)]
/// pub struct MyPointXYZI {
///     pub x: f32,
///     pub y: f32,
///     pub z: f32,
///     pub intensity: f32,
/// }
///
/// impl From<MyPointXYZI> for Point<f32, 3, 1> {
///     fn from(point: MyPointXYZI) -> Self {
///         Point {
///             coords: [point.x, point.y, point.z],
///             meta: [point.intensity.into()],
///         }
///     }
/// }
///
/// impl From<Point<f32, 3, 1>> for MyPointXYZI {
///     fn from(point: Point<f32, 3, 1>) -> Self {
///         Self {
///             x: point.coords[0],
///             y: point.coords[1],
///             z: point.coords[2],
///             intensity: point.meta[0].get(),
///         }
///     }
/// }
///
/// impl MetaNames<1> for MyPointXYZI {
///    fn meta_names() -> [&'static str; 1] {
///       ["intensity"]
///   }
/// }
///
/// impl PointConvertible<f32, {size_of!(f32)}, 3, 1> for MyPointXYZI {}
/// ```
pub trait PointConvertible<const N: usize>:
    KnownLayout + From<Point<N>> + Into<Point<N>> + Fields<N> + Clone + 'static + Default
{
}

enum PointField {
    Padding(u32),
    Field {
        name: String,
        size: u32,
        datatype: u8,
    },
}

impl TryFrom<type_layout::Field> for PointField {
    type Error = ConversionError;

    fn try_from(f: type_layout::Field) -> Result<Self, Self::Error> {
        match f {
            type_layout::Field::Field { name, ty, size } => {
                let typename: String = ty.to_owned().into();
                let datatype = FieldDatatype::try_from(typename)?;
                Ok(Self::Field {
                    name: name.to_owned().into(),
                    size: size as u32,
                    datatype: datatype.into(),
                })
            }
            type_layout::Field::Padding { size } => Ok(Self::Padding(size as u32)),
        }
    }
}

struct TypeLayoutInfo {
    fields: Vec<PointField>,
}

impl TryFrom<type_layout::TypeLayoutInfo> for TypeLayoutInfo {
    type Error = ConversionError;

    fn try_from(t: type_layout::TypeLayoutInfo) -> Result<Self, Self::Error> {
        let fields: Vec<PointField> = t
            .fields
            .into_iter()
            .map(PointField::try_from)
            .collect::<Result<Vec<_>, _>>()?;
        Ok(Self { fields })
    }
}

trait KnownLayout {
    fn layout() -> TypeLayoutInfo;
}

/// Metadata representation for a point.
///
/// This struct is used to store meta data in a fixed size byte buffer along the with the
/// datatype that is encoded so that it can be decoded later.
///
/// # Example
/// ```
/// use ros_pointcloud2::PointMeta;
///
/// let original_data: f64 = 1.0;
/// let meta = PointMeta::new(original_data);
/// let my_data: f64 = meta.get();
/// ```
#[derive(Debug, Clone, Copy)]
pub struct PointMeta {
    bytes: [u8; std::mem::size_of::<f64>()],
    endianness: Endianness,
    datatype: FieldDatatype,
}

impl Default for PointMeta {
    fn default() -> Self {
        Self {
            bytes: [u8::default(); std::mem::size_of::<f64>()],
            datatype: FieldDatatype::F32,
            endianness: Endianness::default(),
        }
    }
}

impl PointMeta {
    /// Create a new PointMeta from a value.
    ///
    /// # Example
    /// ```
    /// let meta = ros_pointcloud2::PointMeta::new(1.0);
    /// ```
    #[inline(always)]
    pub fn new<T: FromBytes>(value: T) -> Self {
        let raw_bytes = T::bytes(&value);
        let mut bytes = [0; std::mem::size_of::<f64>()];
        for (byte, save_byte) in raw_bytes.into_iter().zip(bytes.iter_mut()) {
            *save_byte = byte;
        }

        Self {
            bytes,
            datatype: T::field_datatype(),
            ..Default::default()
        }
    }

    #[inline(always)]
    fn from_buffer(
        data: &[u8],
        offset: usize,
        datatype: FieldDatatype,
        endianness: Endianness,
    ) -> Self {
        debug_assert!(data.len() >= offset + datatype.size());
        let bytes = [u8::default(); std::mem::size_of::<f64>()];
        unsafe {
            let data_ptr = data.as_ptr().add(offset);
            let bytes_ptr = bytes.as_ptr() as *mut u8;
            std::ptr::copy_nonoverlapping(data_ptr, bytes_ptr, datatype.size());
        }

        Self {
            bytes,
            datatype,
            endianness,
        }
    }

    /// Get the numeric value from the PointMeta description.
    ///
    /// # Example
    /// ```
    /// let original_data: f64 = 1.0;
    /// let meta = ros_pointcloud2::PointMeta::new(original_data);
    /// let my_data: f64 = meta.get();
    /// ```
    pub fn get<T: FromBytes>(&self) -> T {
        let size = T::field_datatype().size();
        let bytes = self
            .bytes
            .get(0..size)
            .expect("Exceeds bounds of f64, which is the largest type");

        match self.endianness {
            Endianness::Big => T::from_be_bytes(bytes),
            Endianness::Little => T::from_le_bytes(bytes),
        }
    }
}

impl From<f32> for PointMeta {
    fn from(value: f32) -> Self {
        Self::new(value)
    }
}

impl From<f64> for PointMeta {
    fn from(value: f64) -> Self {
        Self::new(value)
    }
}

impl From<i32> for PointMeta {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl From<u8> for PointMeta {
    fn from(value: u8) -> Self {
        Self::new(value)
    }
}

impl From<u16> for PointMeta {
    fn from(value: u16) -> Self {
        Self::new(value)
    }
}

impl From<u32> for PointMeta {
    fn from(value: u32) -> Self {
        Self::new(value)
    }
}

impl From<i8> for PointMeta {
    fn from(value: i8) -> Self {
        Self::new(value)
    }
}

impl From<i16> for PointMeta {
    fn from(value: i16) -> Self {
        Self::new(value)
    }
}
